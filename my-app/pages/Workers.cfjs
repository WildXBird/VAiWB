global = window = this
global.debug = false
global.navigator = { "vendorSub": "", "productSub": "20030107", "vendor": "Google Inc.", "maxTouchPoints": 0, "userActivation": {}, "doNotTrack": null, "geolocation": {}, "connection": {}, "plugins": { "0": { "0": {} }, "1": { "0": {} }, "2": { "0": {}, "1": {} }, "3": { "0": {}, "1": {} } }, "mimeTypes": { "0": {}, "1": {}, "2": {}, "3": {}, "4": {}, "5": {} }, "webkitTemporaryStorage": {}, "webkitPersistentStorage": {}, "hardwareConcurrency": 12, "cookieEnabled": true, "appCodeName": "Mozilla", "appName": "Netscape", "appVersion": "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36", "platform": "Win32", "product": "Gecko", "userAgent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36", "language": "zh-CN", "languages": ["zh-CN", "en-US", "en", "zh"], "onLine": true, "xr": {}, "mediaCapabilities": {}, "permissions": {}, "locks": {}, "wakeLock": {}, "usb": {}, "mediaSession": {}, "clipboard": {}, "credentials": {}, "keyboard": {}, "mediaDevices": {}, "storage": {}, "serviceWorker": {}, "deviceMemory": 8, "presentation": {}, "bluetooth": {} }
global.Qpid = "	HE2012271135081675"
global.Qkey = "	dc7f6ff6022e4c2ab300fa073137296f"

addEventListener('fetch', event => {
  global.requestStartTime = new Date().valueOf()
  x = x + 1
  event.respondWith(handleRequest(event.request))
})
let x = 0

let getWeathcer = function (cityId) {
  return new Promise(function (resolve, reject) {
    console.log("getWeathcer",cityId)
    let url = `http://t.weather.itboy.net/api/weather/city/${cityId || 0}`
    console.log("fetch",url)
    fetch(url, {
      method: "GET",
      headers: {
        "Host": 't.weather.itboy.net',
        "User-Agent": 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0',
        "Content-Type": 'application/json',
        "Connection": 'keep-alive',
      }
    }).then(function (data) {
      data.json().then(function (data) {
        console.log('rm_v1', data)
        if ((data.status) != "200") {
          reject("失败")
        } else {
          resolve(data)
        }
      }).catch(function (err) {
        reject("失败2")
      })
    })
  })
}
async function handleRequest(request) {
  return new Promise(function (resolve, reject) {

    if ("GET" != request.method) {
      resolve(makeRes("A1", 400))
      return
    } else {
      let url = request.url
      let path = "/"
      {
        try {
          let dnp = url.substring(url.indexOf("//") + 2)
          path = dnp.substring(dnp.indexOf("/"))
        } catch (error) { }
      }
      let cityId = path.substring(1)
      console.log("cityId",cityId)
      getWeathcer(cityId).then(function (data) {
        resolve(makeRes(JSON.stringify(data), 200))
      }).catch(function (error) {
        console.log("ERROR",error)
        resolve(makeRes("A1", 500))
      })
      return
    }
  })
}
function makeRes(body, status = 200, headers = {}) {
  headers['--ver'] = "V1"
  headers['access-control-allow-origin'] = "*"
  headers['access-control-expose-headers'] = "*"
  if (typeof (body) == "object") {
    body = JSON.stringify(body)
  }
  return new Response(body, { status: status, headers })
}